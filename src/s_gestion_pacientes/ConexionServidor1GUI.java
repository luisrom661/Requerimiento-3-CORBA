/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package s_gestion_pacientes;

import java.io.File;
import javax.swing.JOptionPane;
import org.omg.CORBA.ORB;
import org.omg.CORBA.ORBPackage.InvalidName;
import org.omg.CosNaming.NameComponent;
import org.omg.CosNaming.NamingContextExt;
import org.omg.CosNaming.NamingContextExtHelper;
import org.omg.CosNaming.NamingContextPackage.CannotProceed;
import org.omg.CosNaming.NamingContextPackage.NotFound;
import org.omg.PortableServer.POA;
import org.omg.PortableServer.POAHelper;
import org.omg.PortableServer.POAManagerPackage.AdapterInactive;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;
import plugins.TextPrompt;

/**
 *
 * @author Luis Romero - Santiago Cordoba
 */
public class ConexionServidor1GUI extends javax.swing.JFrame {

    /**
     * Creates new form ConexionServidor1GUI
     */
    public ConexionServidor1GUI() {
        initComponents();
        
        TextPrompt textDireccionIP = new TextPrompt("Dirección IP", txtDireccionIPConexionServidor1);
        TextPrompt textPuerto = new TextPrompt("Puerto", txtPuertoConexionServidor1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlConexionServidor1 = new javax.swing.JPanel();
        lbServidor = new javax.swing.JLabel();
        lbConexionServidor = new javax.swing.JLabel();
        lbDireccionIP = new javax.swing.JLabel();
        lbPuerto = new javax.swing.JLabel();
        txtDireccionIPConexionServidor1 = new javax.swing.JTextField();
        txtPuertoConexionServidor1 = new javax.swing.JTextField();
        btnConectarServidor1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlConexionServidor1.setPreferredSize(new java.awt.Dimension(342, 253));

        lbServidor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/servidor.png"))); // NOI18N

        lbConexionServidor.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 24)); // NOI18N
        lbConexionServidor.setText("Conexión Servidor 1");

        lbDireccionIP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/direccion-ip.png"))); // NOI18N

        lbPuerto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/llave-de-casa.png"))); // NOI18N

        txtDireccionIPConexionServidor1.setText("localhost");

        txtPuertoConexionServidor1.setText("5001");
        txtPuertoConexionServidor1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPuertoConexionServidor1KeyTyped(evt);
            }
        });

        btnConectarServidor1.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 14)); // NOI18N
        btnConectarServidor1.setText("¡Conectar Servidor!");
        btnConectarServidor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarServidor1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlConexionServidor1Layout = new javax.swing.GroupLayout(pnlConexionServidor1);
        pnlConexionServidor1.setLayout(pnlConexionServidor1Layout);
        pnlConexionServidor1Layout.setHorizontalGroup(
            pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConexionServidor1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbServidor)
                    .addGroup(pnlConexionServidor1Layout.createSequentialGroup()
                        .addGroup(pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPuerto)
                            .addComponent(lbDireccionIP))
                        .addGap(13, 13, 13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbConexionServidor)
                    .addGroup(pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPuertoConexionServidor1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                        .addComponent(txtDireccionIPConexionServidor1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlConexionServidor1Layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(btnConectarServidor1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlConexionServidor1Layout.setVerticalGroup(
            pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConexionServidor1Layout.createSequentialGroup()
                .addGroup(pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlConexionServidor1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(lbConexionServidor))
                    .addGroup(pnlConexionServidor1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbServidor)))
                .addGap(20, 20, 20)
                .addGroup(pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbDireccionIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDireccionIPConexionServidor1))
                .addGap(18, 18, 18)
                .addGroup(pnlConexionServidor1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lbPuerto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPuertoConexionServidor1))
                .addGap(18, 18, 18)
                .addComponent(btnConectarServidor1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlConexionServidor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlConexionServidor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtPuertoConexionServidor1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPuertoConexionServidor1KeyTyped
        char validarNumero = evt.getKeyChar();
        if (Character.isLetter(validarNumero)) {
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(rootPane, "Solo se permite ingresar números.");
        }
    }//GEN-LAST:event_txtPuertoConexionServidor1KeyTyped

    private void btnConectarServidor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarServidor1ActionPerformed
        int numPuertoRMIRegistry = 0;
        String direccionIpRMIRegistry = "";

        direccionIpRMIRegistry = txtDireccionIPConexionServidor1.getText();
        numPuertoRMIRegistry = Integer.parseInt(txtPuertoConexionServidor1.getText());

        try {
            if (txtDireccionIPConexionServidor1.getText().equals("") && txtPuertoConexionServidor1.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "No puede haber datos vacios");
            } else {
                String[] vec = new String[4];//almacena la información para localizar el ns
                vec[0] = "-ORBInitialHost";
                vec[1] = direccionIpRMIRegistry;
                vec[2] = "-ORBInitialPort";
                vec[3] = String.valueOf(numPuertoRMIRegistry);
                GestionInformesImpl objRemotoIn = new GestionInformesImpl();
                GestionUsuariosImpl objRemotoPl = new GestionUsuariosImpl();
                //SSeguimientoPacientes referencia = obtenerReferencia(vec);
                //objRemotoIn.obtener_referencia(referencia);
                File file1 = new File("src/CarpetaTXT/historialTGI.txt");
                File file2 = new File("src/CarpetaTXT/listadoTGIAprobados.txt");
                if (file1.exists() && !file1.isDirectory()) {
                    file1.delete();
                }
                if (file2.exists()) {
                    file2.delete();
                }
                inicializarORB(vec, objRemotoIn, objRemotoPl);
            }
        } catch (Exception e) {
            System.out.println("Error: " + e);
            e.printStackTrace(System.out);
        }
    }//GEN-LAST:event_btnConectarServidor1ActionPerformed

    private static void inicializarORB(String[] vec, GestionInformesImpl objRemoto1, GestionUsuariosImpl objRemoto2) throws ServantNotActive, WrongPolicy, org.omg.CORBA.ORBPackage.InvalidName, AdapterInactive, InvalidName, NotFound, CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {
        // crea e inicia el ORB
        ORB orb = ORB.init(vec, null);
        POA rootpoa = POAHelper.narrow(orb.resolve_initial_references("RootPOA"));
        rootpoa.the_POAManager().activate();

        //*** se genera la referencia del servant
        org.omg.CORBA.Object objGestion = rootpoa.servant_to_reference(objRemoto1);
        SGestionInformes hrefGestion = SGestionInformesHelper.narrow(objGestion);

        org.omg.CORBA.Object objUsuario = rootpoa.servant_to_reference(objRemoto2);
        SGestionUsuario hrefUsuario = SGestionUsuarioHelper.narrow(objUsuario);

        // se obtiene un link al name service
        org.omg.CORBA.Object objref = orb.resolve_initial_references("NameService");
        NamingContextExt ncref = NamingContextExtHelper.narrow(objref);

        // *** se realiza el binding de la referencia del servant en el N_S ***
        String name1 = "gestion";
        String name2 = "usuario";

        NameComponent path1[] = ncref.to_name(name1);
        NameComponent path2[] = ncref.to_name(name2);

        ncref.rebind(path1, hrefGestion);
        ncref.rebind(path2, hrefUsuario);

        System.out.println("El Servidor esta listo y esperando ...");

        // esperan por las invocaciones desde los clientes
        orb.run();
    }
    
    private static SSeguimientoPacientes obtenerReferencia(String[] vec) throws org.omg.CORBA.ORBPackage.InvalidName {
        SSeguimientoPacientes ref = null;
        try {
            ORB orb = ORB.init(vec, null);
            org.omg.CORBA.Object objRef = orb.resolve_initial_references("NameService");
            NamingContextExt nRef = NamingContextExtHelper.narrow(objRef);

            String name = "seguimiento";
            ref = (SSeguimientoPacientes) SSeguimientoPacientesHelper.narrow(nRef.resolve_str(name));
            return ref;
        } catch (Exception ex) {

        }
        return ref;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConexionServidor1GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConexionServidor1GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConexionServidor1GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConexionServidor1GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConexionServidor1GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectarServidor1;
    private javax.swing.JLabel lbConexionServidor;
    private javax.swing.JLabel lbDireccionIP;
    private javax.swing.JLabel lbPuerto;
    private javax.swing.JLabel lbServidor;
    private javax.swing.JPanel pnlConexionServidor1;
    private javax.swing.JTextField txtDireccionIPConexionServidor1;
    private javax.swing.JTextField txtPuertoConexionServidor1;
    // End of variables declaration//GEN-END:variables
}
